'==============================================================================
'  WARNING!!  This file is overwritten by the Block UI Styler while generating
'  the automation code. Any modifications to this file will be lost after
'  generating the code again.
'
'       Filename:  D:\UG\CAEAutomation.vb
'
'        This file was generated by the NX Block UI Styler
'        Created by: lacombe
'              Version: NX 8
'              Date: 11-16-2011  (Format: mm-dd-yyyy)
'              Time: 15:00 (Format: hh-mm)
'
'==============================================================================

'==============================================================================
'  Purpose:  This TEMPLATE file contains VB.NET source to guide you in the
'  construction of your Block application dialog. The generation of your
'  dialog file (.dlx extension) is the first step towards dialog construction
'  within NX.  You must now create a NX Open application that
'  utilizes this file (.dlx).
'
'  The information in this file provides you with the following:
'
'  1.  Help on how to load and display your Block UI Styler dialog in NX
'      using APIs provided in NXOpen.BlockStyler namespace
'  2.  The empty callback methods (stubs) associated with your dialog items
'      have also been placed in this file. These empty methods have been
'      created simply to start you along with your coding requirements.
'      The method name, argument list and possible return values have already
'      been provided for you.
'==============================================================================

'------------------------------------------------------------------------------
'These imports are needed for the following template code
'------------------------------------------------------------------------------
Option Strict Off
Imports System
Imports NXOpen
Imports NXOpen.BlockStyler
Imports NXOpen.Utilities

'------------------------------------------------------------------------------
'Represents Block Styler application class
'------------------------------------------------------------------------------
Public Class CAEAutomation
    'class members
    Private Shared theSession As Session
    Private Shared theUI As UI
    Private assyPart As Part
    Private mode1Frequency As Double = 0
    Private maxBoardDeflection As Double = 0
    Private maxStandoffsDeflection As Double = 0
    Private theDlxFileName As String
    Private theDialog As NXOpen.BlockStyler.BlockDialog
    Private UpdateBut As NXOpen.BlockStyler.UIBlock' Block type: Group
    Private thicknessDouble As NXOpen.BlockStyler.UIBlock' Block type: Double
    Private diameterDouble As NXOpen.BlockStyler.UIBlock' Block type: Double
    Private group01 As NXOpen.BlockStyler.UIBlock' Block type: Group
    Private frequencyGroup As NXOpen.BlockStyler.UIBlock' Block type: Group
    Private label0 As NXOpen.BlockStyler.UIBlock' Block type: Label
    Private boardFreqLabel As NXOpen.BlockStyler.UIBlock' Block type: Label
    Private acceptToggle As NXOpen.BlockStyler.UIBlock' Block type: Toggle
    Private structuralGroup As NXOpen.BlockStyler.UIBlock' Block type: Group
    Private label01 As NXOpen.BlockStyler.UIBlock' Block type: Label
    Private boardDefLabel As NXOpen.BlockStyler.UIBlock' Block type: Label
    Private label021 As NXOpen.BlockStyler.UIBlock' Block type: Label
    Private standoffDefLabel As NXOpen.BlockStyler.UIBlock' Block type: Label
    
#Region "Block Styler Dialog Designer generator code"
    '------------------------------------------------------------------------------
    'Constructor for NX Styler class
    '------------------------------------------------------------------------------
    Public Sub New()
        Try
        
            theSession = Session.GetSession()
            assyPart = theSession.Parts.Display
            theUI = UI.GetUI()
            theDlxFileName = "CAE Automation.dlx"
            theDialog = theUI.CreateDialog(theDlxFileName)
            theDialog.AddApplyHandler(AddressOf apply_cb)
            theDialog.AddOkHandler(AddressOf ok_cb)
            theDialog.AddUpdateHandler(AddressOf update_cb)
            theDialog.AddInitializeHandler(AddressOf initialize_cb)
            theDialog.AddDialogShownHandler(AddressOf dialogShown_cb)
        
        Catch ex As Exception
            MsgBox("Be sure CircuitBoardAssy.prt is the displayed " + _
                   "part before launching the Application", _
                   MsgBoxStyle.Critical, "Error")

            '---- Enter your exception handling code here -----
            Throw ex
        End Try
    End Sub
#End Region
    
    '------------------------------- DIALOG LAUNCHING ---------------------------------
    '
    '    Before invoking this application one needs to open any part/empty part in NX
    '    because of the behavior of the blocks.
    '
    '    Make sure the dlx file is in one of the following locations:
    '        1.) From where NX session is launched
    '        2.) $UGII_USER_DIR/application
    '        3.) For released applications, using UGII_CUSTOM_DIRECTORY_FILE is highly
    '            recommended. This variable is set to a full directory path to a file 
    '            containing a list of root directories for all custom applications.
    '            e.g., UGII_CUSTOM_DIRECTORY_FILE=$UGII_ROOT_DIR\menus\custom_dirs.dat
    '
    '    You can create the dialog using one of the following way:
    '
    '    1. Journal Replay
    '
    '        1) Replay this file through Tool->Journal->Play Menu.
    '
    '    2. USER EXIT
    '
    '        1) Create the Shared Library -- Refer "Block UI Styler programmer's guide"
    '        2) Invoke the Shared Library through File->Execute->NX Open menu.
    '
    '------------------------------------------------------------------------------
    Public Shared Sub Main()
        Dim theCAEAutomation As CAEAutomation = Nothing
        Try
        
            theCAEAutomation = New CAEAutomation()
            ' The following method shows the dialog immediately
            theCAEAutomation.Show()
        
        Catch ex As Exception
        
            '---- Enter your exception handling code here -----
            theUI.NXMessageBox.Show("Block Styler", NXMessageBox.DialogType.Error, ex.ToString)
        Finally
            If theCAEAutomation IsNot Nothing Then 
                theCAEAutomation.Dispose()
                theCAEAutomation = Nothing
            End If
        End Try
    End Sub
    '------------------------------------------------------------------------------
    ' This method specifies how a shared image is unloaded from memory
    ' within NX. This method gives you the capability to unload an
    ' internal NX Open application or user  exit from NX. Specify any
    ' one of the three constants as a return value to determine the type
    ' of unload to perform:
    '
    '
    '    Immediately : unload the library as soon as the automation program has completed
    '    Explicitly  : unload the library from the "Unload Shared Image" dialog
    '    AtTermination : unload the library when the NX session terminates
    '
    '
    ' NOTE:  A program which associates NX Open applications with the menubar
    ' MUST NOT use this option since it will UNLOAD your NX Open application image
    ' from the menubar.
    '------------------------------------------------------------------------------
    Public Shared Function GetUnloadOption(ByVal arg As String) As Integer
        'Return CType(Session.LibraryUnloadOption.Explicitly, Integer)
         Return CType(Session.LibraryUnloadOption.Immediately, Integer)
        ' Return CType(Session.LibraryUnloadOption.AtTermination, Integer)
    End Function
    '------------------------------------------------------------------------------
    ' Following method cleanup any housekeeping chores that may be needed.
    ' This method is automatically called by NX.
    '------------------------------------------------------------------------------
    Public Shared Function UnloadLibrary(ByVal arg As String) As Integer
        Try
        
            Return 0
        
        Catch ex As Exception
        
            '---- Enter your exception handling code here -----
            theUI.NXMessageBox.Show("Block Styler", NXMessageBox.DialogType.Error, ex.ToString)
        End Try
    End Function
    
    '------------------------------------------------------------------------------
    'This method shows the dialog on the screen
    '------------------------------------------------------------------------------
    Public Sub Show()
        Try
        
            theDialog.Show
        
        Catch ex As Exception
        
            '---- Enter your exception handling code here -----
            theUI.NXMessageBox.Show("Block Styler", NXMessageBox.DialogType.Error, ex.ToString)
        End Try
    End Sub
    
    '------------------------------------------------------------------------------
    'Method Name: Dispose
    '------------------------------------------------------------------------------
    Public Sub Dispose()
        If theDialog IsNot Nothing Then 
            theDialog.Dispose()
            theDialog = Nothing
        End If
    End Sub
    
    '------------------------------------------------------------------------------
    '---------------------Block UI Styler Callback Functions--------------------------
    '------------------------------------------------------------------------------
    
    '------------------------------------------------------------------------------
    'Callback Name: initialize_cb
    '------------------------------------------------------------------------------
    Public Sub initialize_cb()
        Try
        
            UpdateBut = theDialog.TopBlock.FindBlock("UpdateBut")
            thicknessDouble = theDialog.TopBlock.FindBlock("thicknessDouble")
            diameterDouble = theDialog.TopBlock.FindBlock("diameterDouble")
            group01 = theDialog.TopBlock.FindBlock("group01")
            frequencyGroup = theDialog.TopBlock.FindBlock("frequencyGroup")
            label0 = theDialog.TopBlock.FindBlock("label0")
            boardFreqLabel = theDialog.TopBlock.FindBlock("boardFreqLabel")
            acceptToggle = theDialog.TopBlock.FindBlock("acceptToggle")
            structuralGroup = theDialog.TopBlock.FindBlock("structuralGroup")
            label01 = theDialog.TopBlock.FindBlock("label01")
            boardDefLabel = theDialog.TopBlock.FindBlock("boardDefLabel")
            label021 = theDialog.TopBlock.FindBlock("label021")
            standoffDefLabel = theDialog.TopBlock.FindBlock("standoffDefLabel")
            Dim boardFrequencyLabelProp As PropertyList = boardFreqLabel.GetProperties
            boardFrequencyLabelProp.SetString("Label", Format(mode1Frequency, "0.000"))
            Dim boardDefLabelProp As PropertyList = boardDefLabel.GetProperties
            boardDefLabelProp.SetString("Label", Format(maxBoardDeflection, _
                                                        "0.000 E-00"))
            Dim standoffDefLabelProp As PropertyList = standoffDefLabel.GetProperties
            standoffDefLabelProp.SetString("Label", Format(maxStandoffsDeflection, _
                                                           "0.000 E-00"))

        Catch ex As Exception
        
            '---- Enter your exception handling code here -----
            theUI.NXMessageBox.Show("Block Styler", NXMessageBox.DialogType.Error, ex.ToString)
        End Try
    End Sub
    
    '------------------------------------------------------------------------------
    'Callback Name: dialogShown_cb
    'This callback is executed just before the dialog launch. Thus any value set 
    'here will take precedence and dialog will be launched showing that value. 
    '------------------------------------------------------------------------------
    Public Sub dialogShown_cb()
        Try
            Dim expression1 As Expression = _
                CType(Me.assyPart.Expressions.FindObject _
                    ("CircuitBoardThickness"), Expression)
            Dim expression2 As Expression = CType _
                (Me.assyPart.Expressions.FindObject("StandoffDiameter"),  _
                    Expression)
            Dim thicknessProp As PropertyList = thicknessDouble.GetProperties
            thicknessProp.SetDouble("Value", expression1.RightHandSide)
            Dim diameterProp As PropertyList = diameterDouble.GetProperties
            diameterProp.SetDouble("Value", expression2.RightHandSide)
            '---- Enter your callback code here -----
        
        Catch ex As Exception
        
            '---- Enter your exception handling code here -----
            theUI.NXMessageBox.Show("Block Styler", NXMessageBox.DialogType.Error, ex.ToString)
        End Try
    End Sub
    
    '------------------------------------------------------------------------------
    'Callback Name: apply_cb
    '------------------------------------------------------------------------------
    Public Function apply_cb() As Integer
        Dim errorCode as Integer = 0
        Try
            Dim thicknessProp As PropertyList = thicknessDouble.GetProperties
            Dim diameterProp As PropertyList = diameterDouble.GetProperties
            Dim newDiameter As Double = diameterProp.GetDouble("Value")
            Dim newThickness As Double = thicknessProp.GetDouble("Value")
            EditGeometry(newThickness, newDiameter)
            Dim acceptToggleProp As PropertyList = acceptToggle.GetProperties
            If acceptToggleProp.GetLogical("Value") Then
                Try
                    RunSim101()
                Catch ex As Exception
                    CreateAndRun101()
                End Try
            Else
                Try
                    RunSim103()
                Catch ex As Exception
                    CreateAndRun103()
                End Try
            End If
            '---- Enter your callback code here -----
        
        Catch ex As Exception
        
            '---- Enter your exception handling code here -----
            errorCode = 1
            theUI.NXMessageBox.Show("Block Styler", NXMessageBox.DialogType.Error, ex.ToString)
        End Try
        apply_cb = errorCode
    End Function
    
    '------------------------------------------------------------------------------
    'Callback Name: update_cb
    '------------------------------------------------------------------------------
    Public Function update_cb(ByVal block As NXOpen.BlockStyler.UIBlock) As Integer
        Try
        
            If block Is thicknessDouble Then
            '---- Enter your code here -----
            
            ElseIf block Is diameterDouble Then
            '---- Enter your code here -----
            
            ElseIf block Is label0 Then
            '---- Enter your code here -----
            
            ElseIf block Is boardFreqLabel Then
            '---- Enter your code here -----
            
            ElseIf block Is acceptToggle Then
            '---- Enter your code here -----
            
            ElseIf block Is label01 Then
            '---- Enter your code here -----
            
            ElseIf block Is boardDefLabel Then
            '---- Enter your code here -----
            
            ElseIf block Is label021 Then
            '---- Enter your code here -----
            
            ElseIf block Is standoffDefLabel Then
            '---- Enter your code here -----
            
            End If
        
        Catch ex As Exception
        
            '---- Enter your exception handling code here -----
            theUI.NXMessageBox.Show("Block Styler", NXMessageBox.DialogType.Error, ex.ToString)
        End Try
        update_cb = 0
    End Function
    
    '------------------------------------------------------------------------------
    'Callback Name: ok_cb
    '------------------------------------------------------------------------------
    Public Function ok_cb() As Integer
        Dim errorCode as Integer = 0
        Try
        
            '---- Enter your callback code here -----
            errorCode = apply_cb()
        
        Catch ex As Exception
        
            '---- Enter your exception handling code here -----
            errorCode = 1
            theUI.NXMessageBox.Show("Block Styler", NXMessageBox.DialogType.Error, ex.ToString)
        End Try
        ok_cb = errorCode
    End Function
    
    Sub EditGeometry(ByVal newThickness As Double, _
                     ByVal newDiameter As Double)
        Dim partLoadStatus2 As PartLoadStatus
        Dim status2 As PartCollection.SdpsStatus
        status2 = theSession.Parts.SetDisplay _
            (Me.assyPart, False, True, partLoadStatus2)
        partLoadStatus2.Dispose()
        ' ----------------------------------------------
        '   Menu: Tools->Expression...
        ' ----------------------------------------------
        Dim markId1 As Session.UndoMarkId
        markId1 = theSession.SetUndoMark(Session.MarkVisibility.Visible, "Expression")

        Dim expression1 As Expression = CType(assyPart.Expressions.FindObject("CircuitBoardThickness"), Expression)

        Dim unit1 As Unit = CType(assyPart.UnitCollection.FindObject("Inch"), Unit)

        assyPart.Expressions.EditWithUnits(expression1, unit1, newThickness)

        Dim expression2 As Expression = CType(assyPart.Expressions.FindObject("StandoffDiameter"), Expression)

        assyPart.Expressions.EditWithUnits(expression2, unit1, newDiameter)

        Dim nErrs1 As Integer
        nErrs1 = theSession.UpdateManager.DoUpdate(markId1)

        Dim markId2 As Session.UndoMarkId
        markId2 = theSession.SetUndoMark(Session.MarkVisibility.Visible, "Make Displayed Part")

        Dim femPart1 As CAE.FemPart = CType(theSession.Parts.FindObject("CircuitBoardFEM"), CAE.FemPart)

        Dim partLoadStatus1 As PartLoadStatus
        Dim status1 As PartCollection.SdpsStatus
        status1 = theSession.Parts.SetDisplay(femPart1, False, True, partLoadStatus1)

        Dim workFemPart As CAE.FemPart = CType(theSession.Parts.BaseWork, CAE.FemPart)

        Dim displayFemPart As CAE.FemPart = CType(theSession.Parts.BaseDisplay, CAE.FemPart)

        partLoadStatus1.Dispose()
        ' ----------------------------------------------
        '   Menu: Edit->Update
        ' ----------------------------------------------
        Dim markId3 As Session.UndoMarkId
        markId3 = theSession.SetUndoMark(Session.MarkVisibility.Visible, "Update FE Model")

        Dim fEModel1 As CAE.FEModel = CType(workFemPart.FindObject("FEModel"), CAE.FEModel)

        fEModel1.UpdateFemodel()

        ' ----------------------------------------------
        '   Menu: Tools->Journal->Stop Recording
        ' ----------------------------------------------

    End Sub
    Sub CreateAndRun103()

        Dim workFemPart As CAE.FemPart = CType(theSession.Parts.BaseWork, CAE.FemPart)

        Dim displayFemPart As CAE.FemPart = CType(theSession.Parts.BaseDisplay, CAE.FemPart)

        Dim markId1 As Session.UndoMarkId
        markId1 = theSession.SetUndoMark(Session.MarkVisibility.Visible, "Start")

        Dim fileNew1 As FileNew
        fileNew1 = theSession.Parts.FileNew()

        theSession.SetUndoMarkName(markId1, "New Part File Dialog")

        Dim markId2 As Session.UndoMarkId
        markId2 = theSession.SetUndoMark(Session.MarkVisibility.Invisible, "New Part File")

        fileNew1.TemplateFileName = "SimNxNastranEnglish.sim"

        fileNew1.Application = FileNewApplication.CaeSim

        fileNew1.Units = Part.Units.Inches

        fileNew1.TemplateType = FileNewTemplateType.Item

        fileNew1.NewFileName = "D:\UG\CircuitBoardSim103.sim"

        fileNew1.MasterFileName = ""

        fileNew1.UseBlankTemplate = False

        fileNew1.MakeDisplayedPart = True

        theSession.DeleteUndoMark(markId2, Nothing)

        theSession.SetUndoMarkName(markId1, "New Part File")

        Dim nXObject1 As NXObject
        nXObject1 = fileNew1.Commit()

        Dim workSimPart As CAE.SimPart = CType(theSession.Parts.BaseWork, CAE.SimPart)

        Dim displaySimPart As CAE.SimPart = CType(theSession.Parts.BaseDisplay, CAE.SimPart)

        fileNew1.Destroy()

        Dim markId3 As Session.UndoMarkId
        markId3 = theSession.SetUndoMark(Session.MarkVisibility.Visible, "Start")

        theSession.SetUndoMarkName(markId3, "New Simulation Dialog")

        ' ----------------------------------------------
        '   Dialog Begin New Simulation
        ' ----------------------------------------------
        Dim markId4 As Session.UndoMarkId
        markId4 = theSession.SetUndoMark(Session.MarkVisibility.Invisible, "New Simulation")

        Dim simPart1 As CAE.SimPart = CType(workSimPart, CAE.SimPart)

        Dim femPart1 As CAE.FemPart = CType(theSession.Parts.FindObject("CircuitBoardFEM"), CAE.FemPart)

        Dim description1(-1) As String
        simPart1.FinalizeCreation(femPart1, 0, description1)

        theSession.DeleteUndoMark(markId4, Nothing)

        Dim markId5 As Session.UndoMarkId
        markId5 = theSession.SetUndoMark(Session.MarkVisibility.Visible, "Start")

        Dim simPart2 As CAE.SimPart = CType(workSimPart, CAE.SimPart)

        Dim simSimulation1 As CAE.SimSimulation
        simSimulation1 = simPart2.Simulation

        Dim simSolution1 As CAE.SimSolution
        simSolution1 = simSimulation1.CreateSolution("NX NASTRAN", "Structural", "SESTATIC 101 - Single Constraint", "Solution 1")

        Dim id1 As Session.UndoMarkId
        id1 = theSession.NewestVisibleUndoMark

        Dim nErrs1 As Integer
        nErrs1 = theSession.UpdateManager.DoUpdate(id1)

        Dim simSolutionStep1 As CAE.SimSolutionStep
        simSolutionStep1 = simSolution1.CreateStep(0, "Subcase - Static Loads 1")

        Dim propertyTable1 As CAE.PropertyTable
        propertyTable1 = simSolution1.PropertyTable

        Dim caePart1 As CAE.CaePart = CType(workSimPart, CAE.CaePart)

        Dim modelingObjectPropertyTable1 As CAE.ModelingObjectPropertyTable
        modelingObjectPropertyTable1 = caePart1.ModelingObjectPropertyTables.CreateModelingObjectPropertyTable("Bulk Data Echo Request", "NX NASTRAN - Structural", "NX NASTRAN", "Bulk Data Echo Request1", 2)

        theSession.SetUndoMarkName(id1, "Solution Dialog")

        ' ----------------------------------------------
        '   Dialog Begin Solution
        ' ----------------------------------------------
        theSession.UndoToMark(id1, Nothing)

        theSession.DeleteUndoMark(id1, Nothing)

        Dim markId6 As Session.UndoMarkId
        markId6 = theSession.SetUndoMark(Session.MarkVisibility.Visible, "Start")

        Dim simPart3 As CAE.SimPart = CType(workSimPart, CAE.SimPart)

        Dim simSimulation2 As CAE.SimSimulation
        simSimulation2 = simPart3.Simulation

        Dim simSolution2 As CAE.SimSolution
        simSolution2 = simSimulation2.CreateSolution("NX NASTRAN", "Structural", "SEMODES 103", "Solution 1")

        Dim propertyTable2 As CAE.PropertyTable
        propertyTable2 = simSolution2.PropertyTable

        Dim caePart2 As CAE.CaePart = CType(workSimPart, CAE.CaePart)

        Dim modelingObjectPropertyTable2 As CAE.ModelingObjectPropertyTable
        modelingObjectPropertyTable2 = caePart2.ModelingObjectPropertyTables.CreateModelingObjectPropertyTable("Bulk Data Echo Request", "NX NASTRAN - Structural", "NX NASTRAN", "Bulk Data Echo Request1", 2)

        theSession.SetUndoMarkName(markId6, "Solution Dialog")

        ' ----------------------------------------------
        '   Dialog Begin Solution
        ' ----------------------------------------------
        Dim markId7 As Session.UndoMarkId
        markId7 = theSession.SetUndoMark(Session.MarkVisibility.Invisible, "Solution")

        Dim markId8 As Session.UndoMarkId
        markId8 = theSession.SetUndoMark(Session.MarkVisibility.Invisible, Nothing)

        simSolution2.Rename("Solution 1", False)

        Dim propertyTable3 As CAE.PropertyTable
        propertyTable3 = simSolution2.PropertyTable

        propertyTable3.SetNamedPropertyTablePropertyValue("Bulk Data Echo Request", modelingObjectPropertyTable2)

        Dim modelingObjectPropertyTable3 As CAE.ModelingObjectPropertyTable = CType(workSimPart.ModelingObjectPropertyTables.FindObject("SsmoPropTable[Structural Output Requests1]"), CAE.ModelingObjectPropertyTable)

        propertyTable3.SetNamedPropertyTablePropertyValue("Output Requests", modelingObjectPropertyTable3)

        Dim markId9 As Session.UndoMarkId
        markId9 = theSession.SetUndoMark(Session.MarkVisibility.Invisible, "Start")

        Dim id2 As Session.UndoMarkId
        id2 = theSession.NewestVisibleUndoMark

        Dim nErrs2 As Integer
        nErrs2 = theSession.UpdateManager.DoUpdate(id2)

        Dim simSolutionStep2 As CAE.SimSolutionStep
        simSolutionStep2 = simSolution2.CreateStep(0, "Subcase - Eigenvalue Method 1")

        simSolution2.ActiveStep = simSolutionStep2

        Dim propertyTable4 As CAE.PropertyTable
        propertyTable4 = simSolutionStep2.PropertyTable

        Dim caePart3 As CAE.CaePart = CType(workSimPart, CAE.CaePart)

        Dim modelingObjectPropertyTable4 As CAE.ModelingObjectPropertyTable
        modelingObjectPropertyTable4 = caePart3.ModelingObjectPropertyTables.CreateModelingObjectPropertyTable("Real Eigenvalue - Lanczos", "NX NASTRAN - Structural", "NX NASTRAN", "Real Eigenvalue - Lanczos1", 3)

        theSession.SetUndoMarkName(markId9, "Solution Step Dialog")

        ' ----------------------------------------------
        '   Dialog Begin Solution Step
        ' ----------------------------------------------
        Dim markId10 As Session.UndoMarkId
        markId10 = theSession.SetUndoMark(Session.MarkVisibility.Invisible, "Solution Step")

        Dim markId11 As Session.UndoMarkId
        markId11 = theSession.SetUndoMark(Session.MarkVisibility.Invisible, Nothing)

        simSolutionStep2.SetName("Subcase - Eigenvalue Method 1")

        Dim propertyTable5 As CAE.PropertyTable
        propertyTable5 = simSolutionStep2.PropertyTable

        propertyTable5.SetNamedPropertyTablePropertyValue("Lanczos Method", modelingObjectPropertyTable4)

        Dim nErrs3 As Integer
        nErrs3 = theSession.UpdateManager.DoUpdate(markId11)

        theSession.DeleteUndoMark(markId11, Nothing)

        theSession.DeleteUndoMark(markId10, Nothing)

        theSession.SetUndoMarkName(markId9, "Solution Step")

        theSession.DeleteUndoMark(markId9, Nothing)

        simSolution2.ActiveStep = simSolutionStep2

        Dim nErrs4 As Integer
        nErrs4 = theSession.UpdateManager.DoUpdate(markId8)

        theSession.DeleteUndoMark(markId8, Nothing)

        theSession.DeleteUndoMark(markId7, Nothing)

        theSession.SetUndoMarkName(id2, "Solution")

        Dim markId12 As Session.UndoMarkId
        markId12 = theSession.SetUndoMark(Session.MarkVisibility.Visible, "Start")

        Dim simPart4 As CAE.SimPart = CType(workSimPart, CAE.SimPart)

        Dim simSimulation3 As CAE.SimSimulation
        simSimulation3 = simPart4.Simulation

        Dim simBCBuilder1 As CAE.SimBCBuilder
        simBCBuilder1 = simSimulation3.CreateBcBuilderForConstraintDescriptor("fixedConstraint", "Fixed(1)", 1)

        Dim propertyTable6 As CAE.PropertyTable
        propertyTable6 = simBCBuilder1.PropertyTable

        Dim setManager1 As CAE.SetManager
        setManager1 = simBCBuilder1.TargetSetManager

        Dim fieldExpression1 As Fields.FieldExpression
        fieldExpression1 = propertyTable6.GetScalarFieldPropertyValue("DOF1")

        Dim fieldExpression2 As Fields.FieldExpression
        fieldExpression2 = propertyTable6.GetScalarFieldPropertyValue("DOF2")

        Dim fieldExpression3 As Fields.FieldExpression
        fieldExpression3 = propertyTable6.GetScalarFieldPropertyValue("DOF3")

        Dim fieldExpression4 As Fields.FieldExpression
        fieldExpression4 = propertyTable6.GetScalarFieldPropertyValue("DOF4")

        Dim fieldExpression5 As Fields.FieldExpression
        fieldExpression5 = propertyTable6.GetScalarFieldPropertyValue("DOF5")

        Dim fieldExpression6 As Fields.FieldExpression
        fieldExpression6 = propertyTable6.GetScalarFieldPropertyValue("DOF6")

        theSession.SetUndoMarkName(markId12, "Fixed Constraint Dialog")

        ' ----------------------------------------------
        '   Dialog Begin Fixed Constraint
        ' ----------------------------------------------
        Dim rotMatrix1 As Matrix3x3
        rotMatrix1.Xx = 0.799900527345673
        rotMatrix1.Xy = 0.12738065780255
        rotMatrix1.Xz = -0.586458280161431
        rotMatrix1.Yx = 0.178953371516191
        rotMatrix1.Yy = -0.98338501983954
        rotMatrix1.Yz = 0.0304892370874721
        rotMatrix1.Zx = -0.572830548395511
        rotMatrix1.Zy = -0.129337043313111
        rotMatrix1.Zz = -0.8094053941332
        Dim translation1 As Point3d = New Point3d(-2.5754153870783, 1.58164258702763, 1.5300964918682)
        workSimPart.ModelingViews.WorkView.SetRotationTranslationScale(rotMatrix1, translation1, 1.10037160780642)

        Dim markId13 As Session.UndoMarkId
        markId13 = theSession.SetUndoMark(Session.MarkVisibility.Invisible, "Fixed Constraint")

        Dim objects1(3) As CAE.SetObject
        Dim component1 As Assemblies.Component = CType(workSimPart.ComponentAssembly.RootComponent.FindObject("COMPONENT CircuitBoardFEM 1"), Assemblies.Component)

        objects1(0).Obj = FindFace("STANDOFFFACE1")
        objects1(0).SubType = CAE.CaeSetObjectSubType.None
        objects1(0).SubId = 0
        
        objects1(1).Obj = FindFace("STANDOFFFACE2")
        objects1(1).SubType = CAE.CaeSetObjectSubType.None
        objects1(1).SubId = 0
       
        objects1(2).Obj = FindFace("STANDOFFFACE3")
        objects1(2).SubType = CAE.CaeSetObjectSubType.None
        objects1(2).SubId = 0
        
        objects1(3).Obj = FindFace("STANDOFFFACE4")
        objects1(3).SubType = CAE.CaeSetObjectSubType.None
        objects1(3).SubId = 0
        setManager1.SetTargetSetMembers(0, objects1)

        Dim unit1 As Unit = CType(workSimPart.UnitCollection.FindObject("Inch"), Unit)

        Dim indepVarArray1(-1) As Fields.FieldVariable
        fieldExpression1.EditFieldExpression("0", unit1, indepVarArray1, False)

        propertyTable6.SetScalarFieldPropertyValue("DOF1", fieldExpression1)

        Dim indepVarArray2(-1) As Fields.FieldVariable
        fieldExpression2.EditFieldExpression("0", unit1, indepVarArray2, False)

        propertyTable6.SetScalarFieldPropertyValue("DOF2", fieldExpression2)

        Dim indepVarArray3(-1) As Fields.FieldVariable
        fieldExpression3.EditFieldExpression("0", unit1, indepVarArray3, False)

        propertyTable6.SetScalarFieldPropertyValue("DOF3", fieldExpression3)

        Dim unit2 As Unit = CType(workSimPart.UnitCollection.FindObject("Degrees"), Unit)

        Dim indepVarArray4(-1) As Fields.FieldVariable
        fieldExpression4.EditFieldExpression("0", unit2, indepVarArray4, False)

        propertyTable6.SetScalarFieldPropertyValue("DOF4", fieldExpression4)

        Dim indepVarArray5(-1) As Fields.FieldVariable
        fieldExpression5.EditFieldExpression("0", unit2, indepVarArray5, False)

        propertyTable6.SetScalarFieldPropertyValue("DOF5", fieldExpression5)

        Dim indepVarArray6(-1) As Fields.FieldVariable
        fieldExpression6.EditFieldExpression("0", unit2, indepVarArray6, False)

        propertyTable6.SetScalarFieldPropertyValue("DOF6", fieldExpression6)

        Dim propertyValue1(-1) As String
        propertyTable6.SetTextPropertyValue("description", propertyValue1)

        Dim simBC1 As CAE.SimBC
        simBC1 = simBCBuilder1.CommitAddBc()

        simBCBuilder1.Destroy()

        theSession.DeleteUndoMark(markId13, Nothing)

        theSession.SetUndoMarkName(markId12, "Fixed Constraint")

        ' ----------------------------------------------
        '   Dialog Begin Solve
        ' ----------------------------------------------
        simSolution2.Solve(CAE.SimSolution.SolveOption.Solve, CAE.SimSolution.SetupCheckOption.CompleteCheckAndOutputErrors)

        ' ----------------------------------------------
        '   Menu: Tools->Journal->Stop Recording
        ' ----------------------------------------------
        MsgBox("Wait for solver to finish then press 'OK'", _
               MsgBoxStyle.Information, "Solver in Progress")
        Dim results As CAE.Result = GetResults(simSolution2)
        Dim resultsDescr As String
        Dim resultsValue As Double
        Dim loadCaseValueType As CAE.Result.LoadcaseValueType = _
            results.AskResultLoadcaseValue(0, resultsDescr, resultsValue)
        Me.mode1Frequency = resultsValue

    End Sub
    Function FindFace(ByVal faceName As String) As CAE.CAEFace
        Dim ufs As NXOpen.UF.UFSession = NXOpen.UF.UFSession.GetUFSession()
        Dim myFace As NXOpen.Tag = NXOpen.Tag.Null
        Dim polyFace As CAE.CAEFace
        Do
            ufs.Obj.CycleByName(faceName, myFace)
            If myFace <> NXOpen.Tag.Null Then
                polyFace = NXObjectManager.Get(myFace)
                Return polyFace
            End If
        Loop Until myFace = NXOpen.Tag.Null
        Return Nothing
    End Function
    Sub RunSim103()

        Dim simPart1 As CAE.SimPart = CType(theSession.Parts.FindObject("CircuitBoardSim103"), CAE.SimPart)

        Dim partLoadStatus1 As PartLoadStatus
        Dim status1 As PartCollection.SdpsStatus
        status1 = theSession.Parts.SetDisplay(simPart1, False, True, partLoadStatus1)

        Dim workSimPart As CAE.SimPart = CType(theSession.Parts.BaseWork, CAE.SimPart)

        Dim displaySimPart As CAE.SimPart = CType(theSession.Parts.BaseDisplay, CAE.SimPart)

        partLoadStatus1.Dispose()
        Dim simSimulation1 As CAE.SimSimulation = CType(workSimPart.FindObject("Simulation"), CAE.SimSimulation)

        Dim simSolution1 As CAE.SimSolution = CType(simSimulation1.FindObject("Solution[Solution 1]"), CAE.SimSolution)

        simSolution1.Solve(CAE.SimSolution.SolveOption.Solve, CAE.SimSolution.SetupCheckOption.CompleteCheckAndOutputErrors)

        ' ----------------------------------------------
        '   Menu: Tools->Journal->Stop Recording
        ' ----------------------------------------------
        MsgBox("Wait for solver to finish then press 'OK'", _
               MsgBoxStyle.Information, "Solver in Progress")
        Dim results As CAE.Result = GetResults(simSolution1)
        Dim resultsDescr As String
        Dim resultsValue As Double
        Dim loadCaseValueType As CAE.Result.LoadcaseValueType = _
            results.AskResultLoadcaseValue(0, resultsDescr, resultsValue)
        Me.mode1Frequency = resultsValue

    End Sub
    Sub CreateAndRun101()

        Dim markId1 As Session.UndoMarkId
        markId1 = theSession.SetUndoMark(Session.MarkVisibility.Visible, "Make Displayed Part")

        Dim femPart1 As CAE.FemPart = CType(theSession.Parts.FindObject("CircuitBoardFEM"), CAE.FemPart)

        Dim partLoadStatus1 As PartLoadStatus
        Dim status1 As PartCollection.SdpsStatus
        status1 = theSession.Parts.SetDisplay(femPart1, False, True, partLoadStatus1)

        Dim workFemPart As CAE.FemPart = CType(theSession.Parts.BaseWork, CAE.FemPart)

        Dim displayFemPart As CAE.FemPart = CType(theSession.Parts.BaseDisplay, CAE.FemPart)

        partLoadStatus1.Dispose()
        Dim markId2 As Session.UndoMarkId
        markId2 = theSession.SetUndoMark(Session.MarkVisibility.Visible, "Start")

        Dim fileNew1 As FileNew
        fileNew1 = theSession.Parts.FileNew()

        theSession.SetUndoMarkName(markId2, "New Part File Dialog")

        Dim markId3 As Session.UndoMarkId
        markId3 = theSession.SetUndoMark(Session.MarkVisibility.Invisible, "New Part File")

        fileNew1.TemplateFileName = "SimNxNastranEnglish.sim"

        fileNew1.Application = FileNewApplication.CaeSim

        fileNew1.Units = Part.Units.Inches

        fileNew1.TemplateType = FileNewTemplateType.Item

        fileNew1.NewFileName = "D:\UG\CircuitBoardSim101.sim"

        fileNew1.MasterFileName = ""

        fileNew1.UseBlankTemplate = False

        fileNew1.MakeDisplayedPart = True

        theSession.DeleteUndoMark(markId3, Nothing)

        theSession.SetUndoMarkName(markId2, "New Part File")

        Dim nXObject1 As NXObject
        nXObject1 = fileNew1.Commit()
        Dim workSimPart As CAE.SimPart = CType(theSession.Parts.BaseWork, CAE.SimPart)
        Dim displaySimPart As CAE.SimPart = CType(theSession.Parts.BaseDisplay, CAE.SimPart)
        workSimPart = CType(theSession.Parts.BaseWork, CAE.SimPart)
        displaySimPart = CType(theSession.Parts.BaseDisplay, CAE.SimPart)
        fileNew1.Destroy()

        Dim markId4 As Session.UndoMarkId
        markId4 = theSession.SetUndoMark(Session.MarkVisibility.Visible, "Start")

        theSession.SetUndoMarkName(markId4, "New Simulation Dialog")

        ' ----------------------------------------------
        '   Dialog Begin New Simulation
        ' ----------------------------------------------
        Dim markId5 As Session.UndoMarkId
        markId5 = theSession.SetUndoMark(Session.MarkVisibility.Invisible, "New Simulation")

        Dim simPart1 As CAE.SimPart = CType(workSimPart, CAE.SimPart)

        Dim description1(-1) As String
        simPart1.FinalizeCreation(femPart1, 0, description1)

        theSession.DeleteUndoMark(markId5, Nothing)

        Dim markId6 As Session.UndoMarkId
        markId6 = theSession.SetUndoMark(Session.MarkVisibility.Visible, "Start")

        Dim simPart2 As CAE.SimPart = CType(workSimPart, CAE.SimPart)

        Dim simSimulation1 As CAE.SimSimulation
        simSimulation1 = simPart2.Simulation

        Dim simSolution1 As CAE.SimSolution
        simSolution1 = simSimulation1.CreateSolution("NX NASTRAN", "Structural", "SESTATIC 101 - Single Constraint", "Solution 1")

        Dim id1 As Session.UndoMarkId
        id1 = theSession.NewestVisibleUndoMark

        Dim nErrs1 As Integer
        nErrs1 = theSession.UpdateManager.DoUpdate(id1)

        Dim simSolutionStep1 As CAE.SimSolutionStep
        simSolutionStep1 = simSolution1.CreateStep(0, "Subcase - Static Loads 1")

        Dim propertyTable1 As CAE.PropertyTable
        propertyTable1 = simSolution1.PropertyTable

        Dim caePart1 As CAE.CaePart = CType(workSimPart, CAE.CaePart)

        Dim modelingObjectPropertyTable1 As CAE.ModelingObjectPropertyTable
        modelingObjectPropertyTable1 = caePart1.ModelingObjectPropertyTables.CreateModelingObjectPropertyTable("Bulk Data Echo Request", "NX NASTRAN - Structural", "NX NASTRAN", "Bulk Data Echo Request1", 2)

        theSession.SetUndoMarkName(id1, "Solution Dialog")

        ' ----------------------------------------------
        '   Dialog Begin Solution
        ' ----------------------------------------------
        Dim markId7 As Session.UndoMarkId
        markId7 = theSession.SetUndoMark(Session.MarkVisibility.Invisible, "Solution")

        Dim markId8 As Session.UndoMarkId
        markId8 = theSession.SetUndoMark(Session.MarkVisibility.Invisible, Nothing)

        simSolution1.Rename("Solution 1", False)

        Dim propertyTable2 As CAE.PropertyTable
        propertyTable2 = simSolution1.PropertyTable

        propertyTable2.SetNamedPropertyTablePropertyValue("Bulk Data Echo Request", modelingObjectPropertyTable1)

        Dim modelingObjectPropertyTable2 As CAE.ModelingObjectPropertyTable = CType(workSimPart.ModelingObjectPropertyTables.FindObject("SsmoPropTable[Structural Output Requests1]"), CAE.ModelingObjectPropertyTable)

        propertyTable2.SetNamedPropertyTablePropertyValue("Output Requests", modelingObjectPropertyTable2)

        Dim nErrs2 As Integer
        nErrs2 = theSession.UpdateManager.DoUpdate(markId8)

        theSession.DeleteUndoMark(markId8, Nothing)

        theSession.DeleteUndoMark(markId7, Nothing)

        theSession.SetUndoMarkName(id1, "Solution")

        Dim markId9 As Session.UndoMarkId
        markId9 = theSession.SetUndoMark(Session.MarkVisibility.Visible, "Start")

        Dim simPart3 As CAE.SimPart = CType(workSimPart, CAE.SimPart)

        Dim simSimulation2 As CAE.SimSimulation
        simSimulation2 = simPart3.Simulation

        Dim simBCBuilder1 As CAE.SimBCBuilder
        simBCBuilder1 = simSimulation2.CreateBcBuilderForConstraintDescriptor("fixedConstraint", "Fixed(1)", 1)

        Dim propertyTable3 As CAE.PropertyTable
        propertyTable3 = simBCBuilder1.PropertyTable

        Dim setManager1 As CAE.SetManager
        setManager1 = simBCBuilder1.TargetSetManager

        Dim fieldExpression1 As Fields.FieldExpression
        fieldExpression1 = propertyTable3.GetScalarFieldPropertyValue("DOF1")

        Dim fieldExpression2 As Fields.FieldExpression
        fieldExpression2 = propertyTable3.GetScalarFieldPropertyValue("DOF2")

        Dim fieldExpression3 As Fields.FieldExpression
        fieldExpression3 = propertyTable3.GetScalarFieldPropertyValue("DOF3")

        Dim fieldExpression4 As Fields.FieldExpression
        fieldExpression4 = propertyTable3.GetScalarFieldPropertyValue("DOF4")

        Dim fieldExpression5 As Fields.FieldExpression
        fieldExpression5 = propertyTable3.GetScalarFieldPropertyValue("DOF5")

        Dim fieldExpression6 As Fields.FieldExpression
        fieldExpression6 = propertyTable3.GetScalarFieldPropertyValue("DOF6")

        theSession.SetUndoMarkName(markId9, "Fixed Constraint Dialog")

        ' ----------------------------------------------
        '   Dialog Begin Fixed Constraint
        ' ----------------------------------------------
        Dim markId10 As Session.UndoMarkId
        markId10 = theSession.SetUndoMark(Session.MarkVisibility.Invisible, "Fixed Constraint")

        Dim objects1(3) As CAE.SetObject
        Dim component1 As Assemblies.Component = CType(workSimPart.ComponentAssembly.RootComponent.FindObject("COMPONENT CircuitBoardFEM 1"), Assemblies.Component)

        objects1(0).Obj = FindFace("STANDOFFFACE1")
        objects1(0).SubType = CAE.CaeSetObjectSubType.None
        objects1(0).SubId = 0
        
        objects1(1).Obj = FindFace("STANDOFFFACE2")
        objects1(1).SubType = CAE.CaeSetObjectSubType.None
        objects1(1).SubId = 0
       
        objects1(2).Obj = FindFace("STANDOFFFACE3")
        objects1(2).SubType = CAE.CaeSetObjectSubType.None
        objects1(2).SubId = 0
        
        objects1(3).Obj = FindFace("STANDOFFFACE4")
        objects1(3).SubType = CAE.CaeSetObjectSubType.None
        objects1(3).SubId = 0
        setManager1.SetTargetSetMembers(0, objects1)

        Dim unit1 As Unit = CType(workSimPart.UnitCollection.FindObject("Inch"), Unit)

        Dim indepVarArray1(-1) As Fields.FieldVariable
        fieldExpression1.EditFieldExpression("0", unit1, indepVarArray1, False)

        propertyTable3.SetScalarFieldPropertyValue("DOF1", fieldExpression1)

        Dim indepVarArray2(-1) As Fields.FieldVariable
        fieldExpression2.EditFieldExpression("0", unit1, indepVarArray2, False)

        propertyTable3.SetScalarFieldPropertyValue("DOF2", fieldExpression2)

        Dim indepVarArray3(-1) As Fields.FieldVariable
        fieldExpression3.EditFieldExpression("0", unit1, indepVarArray3, False)

        propertyTable3.SetScalarFieldPropertyValue("DOF3", fieldExpression3)

        Dim unit2 As Unit = CType(workSimPart.UnitCollection.FindObject("Degrees"), Unit)

        Dim indepVarArray4(-1) As Fields.FieldVariable
        fieldExpression4.EditFieldExpression("0", unit2, indepVarArray4, False)

        propertyTable3.SetScalarFieldPropertyValue("DOF4", fieldExpression4)

        Dim indepVarArray5(-1) As Fields.FieldVariable
        fieldExpression5.EditFieldExpression("0", unit2, indepVarArray5, False)

        propertyTable3.SetScalarFieldPropertyValue("DOF5", fieldExpression5)

        Dim indepVarArray6(-1) As Fields.FieldVariable
        fieldExpression6.EditFieldExpression("0", unit2, indepVarArray6, False)

        propertyTable3.SetScalarFieldPropertyValue("DOF6", fieldExpression6)

        Dim propertyValue1(-1) As String
        propertyTable3.SetTextPropertyValue("description", propertyValue1)

        Dim simBC1 As CAE.SimBC
        simBC1 = simBCBuilder1.CommitAddBc()

        simBCBuilder1.Destroy()

        theSession.DeleteUndoMark(markId10, Nothing)

        theSession.SetUndoMarkName(markId9, "Fixed Constraint")

        Dim markId11 As Session.UndoMarkId
        markId11 = theSession.SetUndoMark(Session.MarkVisibility.Visible, "Start")

        Dim simPart4 As CAE.SimPart = CType(workSimPart, CAE.SimPart)

        Dim simSimulation3 As CAE.SimSimulation
        simSimulation3 = simPart4.Simulation

        Dim simBCBuilder2 As CAE.SimBCBuilder
        simBCBuilder2 = simSimulation3.CreateBcBuilderForLoadDescriptor("magnitudeDirectionAcceration", "Gravity(1)", 1)

        Dim propertyTable4 As CAE.PropertyTable
        propertyTable4 = simBCBuilder2.PropertyTable

        Dim setManager2 As CAE.SetManager
        setManager2 = simBCBuilder2.TargetSetManager

        Dim expression1 As Expression
        expression1 = workSimPart.Expressions.CreateSystemExpressionWithUnits("0", unit1)

        Dim expression2 As Expression
        expression2 = workSimPart.Expressions.CreateSystemExpressionWithUnits("0", unit1)

        theSession.SetUndoMarkName(markId11, "Gravity Dialog")

        ' ----------------------------------------------
        '   Dialog Begin Gravity
        ' ----------------------------------------------
        Dim origin1 As Point3d = New Point3d(0.0, 0.0, 0.0)
        Dim vector1 As Vector3d = New Vector3d(-0.0, -0.0, -1.0)
        Dim direction1 As Direction
        direction1 = workSimPart.Directions.CreateDirection(origin1, vector1, SmartObject.UpdateOption.AfterModeling)

        Dim markId12 As Session.UndoMarkId
        markId12 = theSession.SetUndoMark(Session.MarkVisibility.Invisible, "Gravity")

        Dim objects2(0) As CAE.SetObject
        Dim nullTaggedObject As TaggedObject = Nothing

        objects2(0).Obj = nullTaggedObject
        objects2(0).SubType = CAE.CaeSetObjectSubType.Part
        objects2(0).SubId = 0
        setManager2.SetTargetSetMembers(0, objects2)

        Dim scalarFieldWrapper1 As Fields.ScalarFieldWrapper
        scalarFieldWrapper1 = propertyTable4.GetScalarFieldWrapperPropertyValue("Acceration")

        Dim expression3 As Expression
        expression3 = scalarFieldWrapper1.GetExpression()

        Dim unit3 As Unit = CType(workSimPart.UnitCollection.FindObject("g's"), Unit)
        Dim gLoad As Double = RunMilesEquation(Me.mode1Frequency)

        workSimPart.Expressions.EditWithUnits(expression3, unit3, gLoad.ToString)

        scalarFieldWrapper1.SetExpression(expression3)

        propertyTable4.SetScalarFieldWrapperPropertyValue("Acceration", scalarFieldWrapper1)

        propertyTable4.SetVectorPropertyValue("Local Axis", direction1)

        Dim propertyValue2(-1) As String
        propertyTable4.SetTextPropertyValue("description", propertyValue2)

        Dim simBC2 As CAE.SimBC
        simBC2 = simBCBuilder2.CommitAddBc()

        simBCBuilder2.Destroy()

        theSession.DeleteUndoMark(markId12, Nothing)

        theSession.SetUndoMarkName(markId11, "Gravity")

        workSimPart.Expressions.Delete(expression1)

        workSimPart.Expressions.Delete(expression2)

        ' ----------------------------------------------
        '   Dialog Begin Solve
        ' ----------------------------------------------
        simSolution1.Solve(CAE.SimSolution.SolveOption.Solve, CAE.SimSolution.SetupCheckOption.CompleteCheckAndOutputErrors)

        ' ----------------------------------------------
        '   Menu: Tools->Journal->Stop Recording
        ' ----------------------------------------------
        MsgBox("Wait for Solver to complete then press 'OK' to continue.", _
          MsgBoxStyle.OkOnly, "Solver in Progress...")
        maxBoardDeflection = GetMaxDisplacement("Board")
        maxStandoffsDeflection = GetMaxDisplacement("Standoffs")
        'Add the following to set the view to the post processing results
        Dim resultManager1 As CAE.ResultManager = _
        CType(theSession.ResultManager, CAE.ResultManager)
        Dim solutionResult1 As CAE.SolutionResult = CType _
             (resultManager1.FindObject _
             ("SolutionResult[CircuitBoardSim101.sim_Solution 1]"),  _
             CAE.SolutionResult)
        Dim postviewId1 As Integer
        postviewId1 = theSession.Post.CreatePostview(0, solutionResult1, _
        False)

    End Sub
    Sub RunSim101()

        Dim simPart1 As CAE.SimPart = CType(theSession.Parts.FindObject("CircuitBoardSim101"), CAE.SimPart)

        Dim partLoadStatus1 As PartLoadStatus
        Dim status1 As PartCollection.SdpsStatus
        status1 = theSession.Parts.SetDisplay(simPart1, False, True, partLoadStatus1)

        Dim workSimPart As CAE.SimPart = CType(theSession.Parts.BaseWork, CAE.SimPart)

        Dim displaySimPart As CAE.SimPart = CType(theSession.Parts.BaseDisplay, CAE.SimPart)

        partLoadStatus1.Dispose()
        Dim markId1 As Session.UndoMarkId
        markId1 = theSession.SetUndoMark(Session.MarkVisibility.Visible, "Start")

        Dim simPart2 As CAE.SimPart = CType(workSimPart, CAE.SimPart)

        Dim simSimulation1 As CAE.SimSimulation
        simSimulation1 = simPart2.Simulation

        Dim simLoad1 As CAE.SimLoad = CType(workSimPart.Simulation.Loads.FindObject("Load[Gravity(1)]"), CAE.SimLoad)

        Dim simBCBuilder1 As CAE.SimBCBuilder
        simBCBuilder1 = simSimulation1.CreateBcBuilderForBc(simLoad1)

        Dim propertyTable1 As CAE.PropertyTable
        propertyTable1 = simBCBuilder1.PropertyTable

        Dim setManager1 As CAE.SetManager
        setManager1 = simBCBuilder1.TargetSetManager

        simBCBuilder1.BcName = "Gravity(1)"

        simBCBuilder1.BcLabel = 1

        Dim unit1 As Unit = CType(workSimPart.UnitCollection.FindObject("Inch"), Unit)

        Dim expression1 As Expression
        expression1 = workSimPart.Expressions.CreateSystemExpressionWithUnits("0", unit1)

        Dim expression2 As Expression
        expression2 = workSimPart.Expressions.CreateSystemExpressionWithUnits("0", unit1)

        theSession.SetUndoMarkName(markId1, "Gravity(1) Dialog")

        Dim markId2 As Session.UndoMarkId
        markId2 = theSession.SetUndoMark(Session.MarkVisibility.Invisible, "Gravity(1)")

        Dim objects1(0) As CAE.SetObject
        Dim nullTaggedObject As TaggedObject = Nothing

        objects1(0).Obj = nullTaggedObject
        objects1(0).SubType = CAE.CaeSetObjectSubType.Part
        objects1(0).SubId = 0
        setManager1.SetTargetSetMembers(0, objects1)

        Dim scalarFieldWrapper1 As Fields.ScalarFieldWrapper
        scalarFieldWrapper1 = propertyTable1.GetScalarFieldWrapperPropertyValue("Acceration")

        Dim expression3 As Expression
        expression3 = scalarFieldWrapper1.GetExpression()

        Dim unit2 As Unit = CType(workSimPart.UnitCollection.FindObject("g's"), Unit)
        Dim gLoad As Double = RunMilesEquation(Me.mode1Frequency)

        workSimPart.Expressions.EditWithUnits(expression3, unit2, gLoad.ToString)

        scalarFieldWrapper1.SetExpression(expression3)

        propertyTable1.SetScalarFieldWrapperPropertyValue("Acceration", scalarFieldWrapper1)

        Dim propertyValue1(-1) As String
        propertyTable1.SetTextPropertyValue("description", propertyValue1)

        Dim simBC1 As CAE.SimBC
        simBC1 = simBCBuilder1.CommitAddBc()

        simBCBuilder1.Destroy()

        theSession.DeleteUndoMark(markId2, Nothing)

        theSession.SetUndoMarkName(markId1, "Gravity(1)")

        workSimPart.Expressions.Delete(expression1)

        workSimPart.Expressions.Delete(expression2)

        ' ----------------------------------------------
        '   Dialog Begin Solve
        ' ----------------------------------------------
        Dim simSolution1 As CAE.SimSolution = CType(simSimulation1.FindObject("Solution[Solution 1]"), CAE.SimSolution)

        simSolution1.Solve(CAE.SimSolution.SolveOption.Solve, CAE.SimSolution.SetupCheckOption.CompleteCheckAndOutputErrors)

        ' ----------------------------------------------
        '   Menu: Tools->Journal->Stop Recording
        ' ----------------------------------------------
        MsgBox("Wait for Solver to complete then press 'OK' to continue.", _
          MsgBoxStyle.OkOnly, "Solver in Progress...")
        maxBoardDeflection = GetMaxDisplacement("Board")
        maxStandoffsDeflection = GetMaxDisplacement("Standoffs")
        'Add the following to set the view to the post processing results
        Dim resultManager1 As CAE.ResultManager = _
        CType(theSession.ResultManager, CAE.ResultManager)
        Dim solutionResult1 As CAE.SolutionResult = CType _
             (resultManager1.FindObject _
             ("SolutionResult[CircuitBoardSim101.sim_Solution 1]"),  _
             CAE.SolutionResult)
        Dim postviewId1 As Integer
        postviewId1 = theSession.Post.CreatePostview(0, solutionResult1, _
        False)

    End Sub
    Function GetResults(ByRef solution As CAE.SimSolution) As CAE.Result

        Dim results As CAE.Result = Nothing
        Dim part As BasePart = theSession.Parts.BaseWork
        Dim theResultManager As CAE.ResultManager = _
             theSession.ResultManager()

        If (theResultManager Is Nothing) Then
            Return Nothing
        End If

        Dim solresults As CAE.SolutionResult = Nothing

        Try
            solresults = theResultManager.CreateSolutionResult(solution)

        Catch ex As Exception

            Return Nothing

        End Try

        If (solresults Is Nothing) Then
            Return Nothing
        End If

        results = CType(solresults, CAE.Result)
        Return results

    End Function
    Function GetMaxDisplacement(ByVal groupName As String)
        ' Grab top level sim part
        Dim workSimPart As CAE.SimPart = _
             CType(theSession.Parts.BaseWork, CAE.SimPart)
        Dim displaySimPart As CAE.SimPart = _
             CType(theSession.Parts.BaseDisplay, CAE.SimPart)
        ' get simulation and active solution
        Dim simSimulation As CAE.SimSimulation = workSimPart.Simulation
        Dim simSolution As CAE.SimSolution = simSimulation.ActiveSolution
        ' create a solutionResult for the solution using the ResultManager
        Dim solutionResult As CAE.SolutionResult = _
             theSession.ResultManager.CreateSolutionResult(simSolution)
        '  grab first loadcase in solution
        Dim baseLoadcases() As CAE.BaseLoadcase = solutionResult.GetLoadcases
        Dim loadCase As CAE.Loadcase = CType(baseLoadcases(0), CAE.Loadcase)
        '  grab first iter in loadcase
        Dim baseIterations() As CAE.BaseIteration = loadCase.GetIterations
        Dim iteration As CAE.Iteration = CType(baseIterations(0),  _
             CAE.Iteration)
        '  grab displacement type result 
        Dim resultType As CAE.ResultType
        Dim baseResultTypes() As CAE.BaseResultType = _
        iteration.GetResultTypes
        '  Iterate through results untill you get the displacement result
        For Each baseResType As CAE.BaseResultType In baseResultTypes
            If baseResType.Quantity = CAE.Result.Quantity.Displacement Then
                resultType = CType(baseResType, CAE.ResultType)
            End If
        Next baseResType

        ' Set up results parameter object
        Dim average1 As CAE.Result.Averaging
        average1.DoAveraging = False
        Dim unit1 As Unit =
        CType(workSimPart.UnitCollection.FindObject("Inch"), Unit)
        Dim resultParameters As CAE.ResultParameters = _
             theSession.ResultManager.CreateResultParameters()
        resultParameters.SetGenericResultType(resultType)
        resultParameters.SetResultBeamSection(-1)
        resultParameters.SetResultShellSection(-1)
        resultParameters.SetResultComponent(CAE.Result.Component.Magnitude)
        resultParameters.SetCoordinateSystem _
             (CAE.Result.CoordinateSystem.AbsoluteRectangular)
        resultParameters.SetSelectedCoordinateSystem _
             (CAE.Result.CoordinateSystemSource.None, -1)
        resultParameters.MakeElementResult(False)
        resultParameters.SetElementValueCriterion _
            (CAE.Result.ElementValueCriterion.Average)
        resultParameters.SetAbsoluteValue(False)
        resultParameters.SetComputationType(CAE.Result.ComputationType.None)
        resultParameters.SetAveragingCriteria(average1)
        resultParameters.SetUnit(unit1)
        ' Finally create result access object 
        Dim resAcc As CAE.ResultAccess = theSession.ResultManager. _
             CreateResultAccess(solutionResult, resultParameters)

        ' Now get first group
        Dim mgr As CAE.SmartSelectionManager = workSimPart.SmartSelectionMgr
        Dim caeGroup1 As CAE.CaeGroup = _
            workSimPart.CaeGroups.FindObject(groupName)

        Dim group1Items() As TaggedObject = caeGroup1.GetEntities
        Dim maxDisplacemet As Double = 0
        For Each grpItem As TaggedObject In group1Items
            ' Get the mesh from the group
            Dim mesh As CAE.Mesh = CType(grpItem, CAE.Mesh)
            If (mesh Is Nothing) Then
                ' Do not process
            Else
                ' Get the elements from the mesh
                Dim method As CAE.RelatedElemMethod = _
                    mgr.CreateRelatedElemMethod(mesh)
                Dim elems() As CAE.FEElement = method.GetElements()
                For Each elem As CAE.FEElement In elems
                    Dim index As Integer = _
                        solutionResult.AskElementIndex(elem.Label)
                    ' Get the nodes from the elements
                    Dim nodeIndexes() As Integer
                    solutionResult.AskElementNodes(index, nodeIndexes)
                    For Each nodeIndex As Integer In nodeIndexes
                        ' Ask the nodes for their results (displacement)
                        Dim mag As Double = _
                            resAcc.AskNodalResult(nodeIndex)
                        If mag > maxDisplacemet Then
                            maxDisplacemet = mag
                        End If
                    Next nodeIndex
                Next elem
                method.Dispose()
            End If
        Next grpItem
        Return maxDisplacemet
        theSession.ResultManager.DeleteResultAccess(resAcc)
        theSession.ResultManager.DeleteResultParameters(resultParameters)
        theSession.ResultManager.DeleteResult(solutionResult)
    End Function
    Function RunMilesEquation(ByVal Frequency As Double)
        Dim m As Double ' Slope From PSD Graph
        Dim b As Double ' Intercept From PSD Graph
        Dim Sg As Double ' Nominal PSD Level (g^2/Hz)
        Dim gLoad As Double ' Static g Load (in/s^2)
        Dim Q As Double = 10 'Maginification Factor
        Select Case Frequency
            Case Is <= 40
                m = 0.010012
                b = -0.10048
            Case Is <= 175
                m = 0
                b = 0.3
            Case Is <= 200
                m = 0.107716
                b = -18.55023
            Case Is <= 500
                m = 0
                b = 2.99289
            Case Is <= 2000
                m = -0.001796
                b = 3.890757
            Case Else
        End Select
        ' Calculate PSD Level using Line Intercept Equation (y = mx + b)
        Sg = m * Frequency + b
        ' Calculate Static g Load using Miles Equation
        gLoad = Math.Sqrt(Frequency * Sg * Q * Math.PI / 2)

        Return gLoad 'Return Equivalent Static g Load
    End Function
End Class
